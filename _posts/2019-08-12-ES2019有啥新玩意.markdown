---
layout:     post
title:      "【翻译】ES2019有啥新玩意？"
subtitle:   "都 9021 年了，你还......"
date:       2019-08-12
author:     "MeloGuo"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 翻译
    - JavaScript
---

![JavaScript](https://blog.tildeloop.com/media/javascript-es-2019.png)
作为最受欢迎并且是 web 开发的主要编程语言之一，JavaScript 在不断地进化并且每次迭代它都会带来新鲜的内部变化。让我们看看 ES2019 中那些能快速放入日常使用的新特性：

## Array.flat()
你现在可以指定深度来递归的拍平嵌套数组。深度默认为 1 ，如果你想全部拍平可以使用 `Infinity`。这个方法不会修改原数组而是会创建一个新的：
```javascript
const arr1 = [1, 2, [3, 4]];
arr1.flat(); // [1, 2, 3, 4]

const arr2 = [1, 2, [3, 4, [5, 6]]];
arr2.flat(2); // [1, 2, 3, 4, 5, 6]

const arr3 = [1, 2, [3, 4, [5, 6, [7, 8]]]];
arr3.flat(Infinity); // [1, 2, 3, 4, 5, 6, 7, 8]
```
如果你在数组中有一个空的槽使用此方法也会被移除
```javascript
const arr4 = [1, 2, , 4, 5];
arr4.flat(); // [1, 2, 4, 5]
```

## Array.flatMap()
这是一个结合了基础的 map 函数然后使用 `Array.flat()` 进行深度为 1 的拍平的方法：
```javascript
const arr1 = [1, 2, 3];

arr1.map(x => [x * 4]; // [[4], [8], [12]]
arr1.flatMap(x => [x * 4]); // [4, 8, 12]
```
另一个更有用的例子：
```javascript
const sentence = ["This is a", "regular", "sentence"];

sentence.map(x => x.split(" ")); // [["This","is","a"],["regular"],["sentence"]]
sentence.flatMap(x => x.split(" ")); // ["This","is","a","regular", "sentence"]
```

## String.trimStart() and String.trimEnd()
除了 `String.Trim()` 可以移除字符串两端的空字符串，现在又有了两个方法可以分别移除左、右两端的空白字符串：
```javascript
const test = " hello ";

test.trim(); // "hello";
test.trimStart(); // "hello ";
test.trimEnd(); // " hello";
```

## Object.fromEntries
一个将对象的键-值对转换为数组的新方法。它的效果与已经熟知的函数 `Object.Entries` 正相反，它用于简化将对象转换为数组的操作。在转换完成后，你将会得到一个数组，但是现在你可以返回操作过的数组再变回对象。让我们试着用一个给对象的所有属性的值平方操作的例子：
```javascript
const obj = { prop1: 2, prop2: 10, prop3: 15 };

let array = Object.entries(obj); // [["prop1", 2], ["prop2", 10], ["prop3", 15]]
```
让我们使用简单的 `map` 来求值的平方
```javascript
array = array.map(([key, value]) => [key, Math.pow(value, 2)]); // [["prop1", 4], ["prop2", 100], ["prop3", 225]]
```
我们转换了对象的值但是我们留下了一个数组。将这个数组传入 `Object.fromEntries` ，转换回成一个对象：
```javascript
const newObj = Object.fromEntries(array); // {prop1: 4, prop2: 100, prop3: 225}
```

## Optional Catch Binding
全新的提案允许你完全忽略 `catch()` 的参数，在许多情况下你根本不想使用这个参数。
```javascript
try {
  //...
} catch (er) {
  //handle error with parameter er
}

try {
  //...
} catch {
  //handle error without parameter
}
```

## Symbol.description
你现在可以访问 `Symbol` 的 `description` 属性来获取值来替代使用 `toString()` 方法：
```javascript
const testSymbol = Symbol("Desc");

testSymbol.description; // "Desc"
```

## Function.toString()
调用函数上的 `toString()` 方法现在会返回函数定义时实际的样子，包括空格和注释。之前的样子：
```javascript
function /* foo comment */ foo() {}

foo.toString(); // "function foo() {}"
```
现在是这样：
```javascript
foo.toString(); // "function /* foo comment */ foo() {}"
```

## JSON.parse() improvements
行分隔符 `{\u2028}` 和段落分隔符 `{\u2029}` 现在能够正确的被解析而不是报 `SyntaxError` 了。

#### 著作权声明

本文译自 [JavaScript: What’s new in ES2019](https://blog.tildeloop.com/posts/javascript-what%E2%80%99s-new-in-es2019/)   
译者 [郭梓梁](https://www.zhihu.com/people/mluka/activities)，首次发布于 [MeloGuo Blog](http://meloguo.com)，转载请保留以上链接
